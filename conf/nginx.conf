daemon off;
user root;
error_log /dev/stdout info;

events {
    worker_connections  1024;
}

http {
    access_log /dev/stdout;

    server {
        server_name localhost;

        mruby_server_context_handler_code '
            s = Nginx::Server.new

            (Docker::Container.me!.exposed_ports.map(&:last) - ENV["YAICHI_EXCLUDED_LISTENING_PORTS"]&.split(",").map(&:to_i).compact).each do |port|
                s.add_listener({address: port.to_s})
            end
        ';

        location /containers {
            default_type application/json;

            mruby_content_handler_code '
                Docker::Container.expire_cache!
                me = Docker::Container.me!
                Nginx.echo(JSON.stringify(
                    (Docker::Container.all - [me]).sort_by(&:name).map do |c|
                        {
                            id: c.id,
                            name: c.name,
                            fqdn: c.fqdn,
                            available_ports: me.exposed_ports.select {|remote, local|
                                c.reachable_from?(me) && c.listening?(me, local)
                            }.map {|remote, local|
                                {remote: remote, local: local}
                            },
                            reachable: c.reachable_from?(me)
                        }
                    end
                ))
            ';
        }

        location / {
            proxy_pass http://localhost:1234;
        }
    }

     server {
        server_name *.localhost;

        mruby_server_context_handler_code '
            s = Nginx::Server.new

            (Docker::Container.me!.exposed_ports.map(&:last) - ENV["YAICHI_EXCLUDED_LISTENING_PORTS"]&.split(",").map(&:to_i).compact).each do |port|
                s.add_listener({address: port.to_s})
            end
        ';

        location / {
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";

            proxy_http_version 1.1;
            proxy_buffering off;

            proxy_connect_timeout 365d;
            proxy_send_timeout 365d;
            proxy_read_timeout 365d;

            client_max_body_size 0;

            mruby_set $backend /usr/local/nginx/hook/proxy.rb;

            if ($backend) {
                proxy_pass http://$backend;
                break;
            }

            proxy_pass http://localhost:1234;
        }
    }
}
